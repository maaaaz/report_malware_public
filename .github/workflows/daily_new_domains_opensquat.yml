name: Daily scans of daily new domain names from OpenSquat feeds

on:
  schedule:
    - cron:  '45 07 * * *'

jobs:
  OpenSquat:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v3
      with:
        ssh-key: ${{ secrets.SSH_PRIVKEY_TO_REPORT_PRIVATE }}
        repository: maaaaz/report_malware
        path: ./REPORT_MALWARE_PRIVATE
    
    - name: Set $REPORT_MALWARE_PRIVATE environment variable for the rest of the workflow
      run: echo "REPORT_MALWARE_PRIVATE=$GITHUB_WORKSPACE/REPORT_MALWARE_PRIVATE" >> $GITHUB_ENV
    
    - name: What time is it ?
      run: |
        date -u
        TZ="Europe/Paris" date
    
    - name: Set up Python 3.10
      uses: actions/setup-python@v4
      with:
        python-version: "3.10"
    
    - name: Download WhoisDS daily Newly Registered Domains
      continue-on-error: true
      run: |
        cd /tmp/
        wget -nv "https://github.com/maaaaz/nrd-list-downloader/raw/master/nrd-list-downloader.sh"
        chmod u+x "./nrd-list-downloader.sh"
        DAY_RANGE=1 "./nrd-list-downloader.sh"
        
        # input limit to test
        #head -n+1000 "./nrd-1days-free.txt" >"./nrd-1days-free_unsorted.txt"
        
        mv "./nrd-1days-free.txt" "./nrd-1days-free_unsorted.txt"
        sed -e 's/#.*$//' -e '/^$/d' "./nrd-1days-free_unsorted.txt" | sort -u > "./nrd-1days-free.txt"
        
        ls -alh "/tmp/nrd-1days-free.txt" && wc "/tmp/nrd-1days-free.txt"
        [[ -s /tmp/nrd-1days-free.txt ]] || exit 1
    
    - name: Install opensquat
      run: |
        cd /tmp/
        git clone https://github.com/maaaaz/opensquat.git
        pip install -r ./opensquat/requirements.txt
    
    - name: Run opensquat
      run: |
        cd /tmp/opensquat/
        
        # a diff between WhoisDS NRD and OpenSquat results
        wget -nv -U "openSquat-2.0.0" "https://feeds.opensquat.com/domain-names.txt" -O opensquat_domains.txt
        grep -v -F -f "/tmp/nrd-1days-free.txt" "./opensquat_domains.txt" > "./opensquat_domains_without_whoisDS"
        ls -alh "./opensquat_domains_without_whoisDS" && wc "./opensquat_domains_without_whoisDS"
        
        python opensquat.py -d "./opensquat_domains_without_whoisDS" -k "$REPORT_MALWARE_PRIVATE/keywords/keywords.txt" > /dev/null
        
        echo '[+] results opensquat'
        mv "./results.txt" "./results_unsorted.txt"
        sort -u "./results_unsorted.txt" > "./results.txt"
        ls -al "./results.txt"
        wc "./results.txt"
        head "./results.txt"
        
    - name: Install Netcraft dependencies and download the script
      run: |
        python -m pip install --upgrade pip
        
        cd /tmp/
        wget -nv "https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/netcraft.py"
        wget -nv "https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/netcraft_requirements.txt"
        pip install -r ./netcraft_requirements.txt
        
    - name: Submit to Netcraft
      env:
        SECRET_NETCRAFT_REPORT_MAIL: ${{ secrets.SECRET_NETCRAFT_REPORT_MAIL }}
        
      run: |
        cd $REPORT_MALWARE_PRIVATE
        git pull --ff-only
        
        TODAY_NETCRAFT_SUBS_DIR=$REPORT_MALWARE_PRIVATE/$(date '+%Y/%m/%Y-%m-%d/netcraft')
        mkdir -p "$TODAY_NETCRAFT_SUBS_DIR"
        TODAY_NETCRAFT_SUBS_FILE=$TODAY_NETCRAFT_SUBS_DIR/submissions.txt
                
        cd /tmp/
        TZ="Europe/Paris" date
        (TZ="Europe/Paris" date && python /tmp/netcraft.py -a submit -i "/tmp/opensquat/results.txt";) > /tmp/temp_netcraft_results
        
        cd $REPORT_MALWARE_PRIVATE
        git pull --ff-only
        cat /tmp/temp_netcraft_results >> $TODAY_NETCRAFT_SUBS_FILE
        
        # -- git stuff
        cd $REPORT_MALWARE_PRIVATE
        git config user.name netcraft-subs-bot
        git config user.email github-actions@github.com
        git add $TODAY_NETCRAFT_SUBS_FILE
        git commit -m "netcraft sub of OpenSquat daily new domains" $TODAY_NETCRAFT_SUBS_FILE
        git pull --rebase
        git push
        
    - name: Install resolver dependencies and download the script
      run: |
        pip install csvkit
        
        cd /tmp/
        wget -nv https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/resolver.py
        wget -nv https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/resolver_requirements.txt
        pip install --force-reinstall -r ./resolver_requirements.txt    
        wget -nv "https://github.com/maaaaz/zmapproject_binaries/raw/main/linux-x64/zdns/zdns" && chmod u+x ./zdns
        
    - name: Resolve data
      run: |
        cd /tmp/
        time ./zdns --input-file "/tmp/opensquat/results.txt" --name-servers "9.9.9.9,149.112.112.112,1.1.1.1,8.8.8.8,1.0.0.1,208.67.222.222,208.67.220.123" --output-file temp_zdns_results_A A
        ls -alh temp_zdns_results_A && wc temp_zdns_results_A
        
        time ./zdns --input-file "/tmp/opensquat/results.txt" --name-servers "9.9.9.9,149.112.112.112,1.1.1.1,8.8.8.8,1.0.0.1,208.67.222.222,208.67.220.123" --output-file temp_zdns_results_AAAA AAAA
        ls -alh temp_zdns_results_AAAA && wc temp_zdns_results_AAAA
        
        cat temp_zdns_results_* > ./zdns_results.txt
        ls -alh zdns_results.txt && wc zdns_results.txt
        
        python -Wall resolver.py -z "/tmp/zdns_results.txt" -o "./new_OpenSquat_domains_resolved.csv"
        
        ls -alh "./new_OpenSquat_domains_resolved.csv" && wc "./new_OpenSquat_domains_resolved.csv"
        head "./new_OpenSquat_domains_resolved.csv"
        
        SQLALCHEMY_SILENCE_UBER_WARNING=1 csvsql -u 1 "./new_OpenSquat_domains_resolved.csv" --tables db --query 'SELECT netloc_idna_decoded FROM db WHERE (ipv4 IS NOT NULL) OR (ipv6 IS NOT NULL)' | sed 1d > "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6"
        split --numeric-suffixes=1 -n 23 "./new_OpenSquat_domains_with_existing_IPv4_or_IPv6" new_OpenSquat_domains_with_existing_IPv4_or_IPv6_
        
        ls -alh new_OpenSquat_domains_with_existing_IPv4_or_IPv6 && wc new_OpenSquat_domains_with_existing_IPv4_or_IPv6
        ls -alh new_OpenSquat_domains_with_existing_IPv4_or_IPv6_* && wc new_OpenSquat_domains_with_existing_IPv4_or_IPv6_*
    
    - name: Submit to CRDF
      continue-on-error: true
      env:
        SECRET_CRDF_API_KEY: ${{ secrets.SECRET_CRDF_API_KEY }}
        
      run: |
        cd /tmp/
        wget -nv "https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/crdf.py"
        wget -nv "https://github.com/maaaaz/red.flag.domains-publications/raw/main/_resources/crdf_requirements.txt"
        pip install -r ./crdf_requirements.txt
        python /tmp/crdf.py -a submit -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6"
    
    - name: Install urlscan dependencies
      run: |
        pip install -r $REPORT_MALWARE_PRIVATE/urlscan.io/requirements.txt    

    - name: Scan to urlscan.io 1
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_01 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_01 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_01" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 2
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_02 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_02 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_02" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 3
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_03 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_03 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_03" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 4
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_04 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_04 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_04" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 5
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_05 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_05 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_05" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 6
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_06 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_06 }}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_06" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 7
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_07 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_07" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 8
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_08 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_08" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 9
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_09 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_09" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 10
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_10 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_10" -a submit -p https > /dev/null &

    - name: Scan to urlscan.io 11
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_11 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_11" -a submit -p https > /dev/null &
        
    - name: Scan to urlscan.io 12
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_12 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_12" -a submit -p https > /dev/null & 
        
        
    - name: Scan to urlscan.io 13
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_13 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_13" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 14
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_14 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_14" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 15
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_15 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_15" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 16
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_16 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_16" -a submit -p https > /dev/null &
        
    
    - name: Scan to urlscan.io 17
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_17 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_17" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 18
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_18 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_18" -a submit -p https > /dev/null &
        
        
    - name: Scan to urlscan.io 19
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_19 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_19" -a submit -p https > /dev/null &
        
    
    - name: Scan to urlscan.io 20
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_20 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_20" -a submit -p https > /dev/null &
        
    
    - name: Scan to urlscan.io 21
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_21 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_21" -a submit -p https > /dev/null &
        
    
    - name: Scan to urlscan.io 22
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_22 }}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_22" -a submit -p https > /dev/null &

    
    - name: Scan to urlscan.io 23
      env: 
        SECRET_URLSCANIO_API_KEY: ${{ secrets.SECRET_URLSCANIO_API_KEY_ICANN_DAILY_23}
        SECRET_URLSCANIO_LOGIN: ${{ secrets.SECRET_URLSCANIO_LOGIN_ICANN_DAILY_07}}
        SECRET_URLSCANIO_PASSWORD: ${{ secrets.SECRET_URLSCANIO_PASSWORD }}
                
      run: |
        cd $REPORT_MALWARE_PRIVATE
        python "$REPORT_MALWARE_PRIVATE/urlscan.io/urlscan_io.py" -i "/tmp/new_OpenSquat_domains_with_existing_IPv4_or_IPv6_23" -a submit -p https > /dev/null &
        
        wait
